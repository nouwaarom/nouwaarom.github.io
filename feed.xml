<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <generator uri="http://jekyllrb.com" version="4.0.1">Jekyll</generator>
  
  
  <link href="https://nouwaarom.com/feed.xml" rel="self" type="application/atom+xml" />
  <link href="https://nouwaarom.com/" rel="alternate" type="text/html" />
  <updated>2022-04-09T16:29:42-05:00</updated>
  <id>https://nouwaarom.com//</id>

  
    <title type="html">Now why?</title>
  

  
    <subtitle>A site with stuff I am interested in and like writing about. There is not too much here yet. But there will be, one day.</subtitle>
  

  

  
  
    <entry>
      
      <title type="html">Parsing with Pest: A simple calculator</title>
      
      
      <link href="https://nouwaarom.com/parsing/2022/04/09/calculator-in-pest.html" rel="alternate" type="text/html" title="Parsing with Pest: A simple calculator" />
      
      <published>2022-04-09T00:00:00-05:00</published>
      <updated>2022-04-09T00:00:00-05:00</updated>
      <id>https://nouwaarom.com/parsing/2022/04/09/calculator-in-pest</id>
      <content type="html" xml:base="https://nouwaarom.com/parsing/2022/04/09/calculator-in-pest.html">&lt;p&gt;This tutorial focuses on the practical aspect of using precedence climbing to parse expressions using &lt;a href=&quot;https://pest.rs/&quot;&gt;pest&lt;/a&gt;.
To illustrate this we build a parser for simple equations, and construct an abstract syntax tree.
This article is written together with &lt;a href=&quot;https://github.com/wildarch&quot;&gt;@wildarch&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;h2 id=&quot;precedence-and-associativity&quot;&gt;Precedence and associativity&lt;/h2&gt;
&lt;p&gt;In a simple equation multiplication and division are evaluated first, which means they have a higher precedence.
e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;1 + 2 * 3&lt;/code&gt; is evaluated as &lt;code class=&quot;highlighter-rouge&quot;&gt;1 + (2 * 3)&lt;/code&gt;, if the precedence was equal it would be &lt;code class=&quot;highlighter-rouge&quot;&gt;(1 + 2) * 3&lt;/code&gt;.
For our system we have the following operands:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;highest precedence: multiplication &amp;amp; division&lt;/li&gt;
  &lt;li&gt;lowest precedence: addition &amp;amp; subtraction&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the expression &lt;code class=&quot;highlighter-rouge&quot;&gt;1 + 2 - 3&lt;/code&gt;, no operator is inherently more important than the other.
Addition, subtraction, multiplication and division are evaluated from left to right.
e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;1 - 2 + 3&lt;/code&gt; is evaluated as &lt;code class=&quot;highlighter-rouge&quot;&gt;(1 - 2) + 3&lt;/code&gt;. We call this property left associativity. 
Operators can also be right associative. For example, we usually evaluate the statement &lt;code class=&quot;highlighter-rouge&quot;&gt;x = y = 1&lt;/code&gt; by first 
assigning &lt;code class=&quot;highlighter-rouge&quot;&gt;y = 1&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;x = 1&lt;/code&gt; (or &lt;code class=&quot;highlighter-rouge&quot;&gt;x = y&lt;/code&gt;) afterwards.&lt;/p&gt;

&lt;p&gt;Associativity only matters if two operators have the same precedence, as is the case with addition and subtraction for 
example. This means that if we have an expression with only additions and subtractions, we can just evaluate it from 
left to right. &lt;code class=&quot;highlighter-rouge&quot;&gt;1 + 2 - 3&lt;/code&gt; is equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;(1 + 2) - 3&lt;/code&gt;. And &lt;code class=&quot;highlighter-rouge&quot;&gt;1 - 2 + 3&lt;/code&gt; is equal to &lt;code class=&quot;highlighter-rouge&quot;&gt;(1 - 2) + 3&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;To go from a flat list of operands separated by operators, it suffices to define a precedence and associativity for each 
operator. With these definitions an algorithm such as precedence climbing is able to construct a corresponding 
expression tree.&lt;/p&gt;

&lt;p&gt;If you are curious to know more about how precedence climbing is implemented, Eli Bendersky has a
&lt;a href=&quot;https://eli.thegreenplace.net/2012/08/02/parsing-expressions-by-precedence-climbing&quot;&gt;great tutorial&lt;/a&gt; on implementing it
from scratch using python.&lt;/p&gt;

&lt;h2 id=&quot;calculator-example&quot;&gt;Calculator example&lt;/h2&gt;
&lt;p&gt;We want our calculator to be able to parse simple equations that consist of integers and simple binary operators.
Additionally, we want to support parenthesis and unary minus.
For example:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1 + 2 * 3
-(2 + 5) * 16
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;grammar&quot;&gt;Grammar&lt;/h2&gt;
&lt;p&gt;We start by defining our atoms, bits of self-contained syntax that cannot be split up into smaller parts.
For our calculator we start with just simple integers:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-pest&quot;&gt;// No whitespace allowed between digits
integer = @{ ASCII_DIGIT+ }

atom = _{ integer }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Next, our binary operators:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-pest&quot;&gt;bin_op = _{ add | subtract | multiply | divide }
	add = { &quot;+&quot; }
	subtract = { &quot;-&quot; }
	multiply = { &quot;*&quot; }
	divide = { &quot;/&quot; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;These two rules will be the input to the
&lt;a href=&quot;https://docs.rs/pest/latest/pest/prec_climber/struct.PrecClimber.html&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;PrecClimber&lt;/code&gt;&lt;/a&gt;. 
It expects to receive atoms separated by operators, like so: &lt;code class=&quot;highlighter-rouge&quot;&gt;atom, bin_op, atom, bin_op, atom, ...&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Corresponding to this format, we define our rule for expressions:&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-pest&quot;&gt;expr = { atom ~ (bin_op ~ atom)* }
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;This defines the grammar which generates the required input for the precedence climber.&lt;/p&gt;

&lt;h2 id=&quot;abstract-syntax-tree&quot;&gt;Abstract Syntax Tree&lt;/h2&gt;
&lt;p&gt;We want to convert our input into an abstract syntax tree.
For this we define the following types:&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nd&quot;&gt;#[derive(Debug)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;BinOp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Expr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nd&quot;&gt;#[derive(Debug)]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Op&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Subtract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;Divide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Note the &lt;code class=&quot;highlighter-rouge&quot;&gt;Box&amp;lt;Expr&amp;gt;&lt;/code&gt; required because Rust 
&lt;a href=&quot;https://doc.rust-lang.org/book/ch15-01-box.html#enabling-recursive-types-with-boxes&quot;&gt;does not allow unboxed recursive types&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;There is no separate atom type, any atom is also a valid expression.&lt;/p&gt;

&lt;h2 id=&quot;precedence-climber&quot;&gt;Precedence climber&lt;/h2&gt;
&lt;p&gt;The precedence of operations is defined in the precedence climber.&lt;/p&gt;

&lt;p&gt;An easy approach is to define the precedence climber as global using &lt;a href=&quot;https://docs.rs/lazy_static/1.4.0/lazy_static/&quot;&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lazy_static&lt;/code&gt;&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Adhering to standard rules of arithmetic, 
we will define addition and subtraction to have lower priority than multiplication and division, 
and make all operators left associative.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nn&quot;&gt;lazy_static&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;lazy_static!&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;ref&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PREC_CLIMBER&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PrecClimber&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;pest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;prec_climber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::{&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Assoc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;use&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;// Precedence is defined lowest to highest&lt;/span&gt;
        &lt;span class=&quot;nn&quot;&gt;PrecClimber&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nd&quot;&gt;vec!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
            &lt;span class=&quot;c1&quot;&gt;// Addition and subtract have equal precedence&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subtract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;   
            &lt;span class=&quot;nn&quot;&gt;Operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Operator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Left&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We are almost there, the only thing that’s left is to use our precedence climber.
For this the &lt;code class=&quot;highlighter-rouge&quot;&gt;climb&lt;/code&gt; function is used, it takes a vector of pairs and two functions.
One function is executed for every primary (atom), and the infix function is executed for every binop with its new left 
hand and right hand side according to the precedence rules defined earlier.
In this example we create an AST in the precedence climber.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pairs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Expr&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;PREC_CLIMBER&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.climb&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;integer&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pair&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_str&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;py&quot;&gt;.parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;i32&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.unwrap&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;unreachable!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Expr::parse expected atom, found {:?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pair&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Rule&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.as_rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nn&quot;&gt;Rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;add&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nn&quot;&gt;Rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;subtract&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Subtract&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nn&quot;&gt;Rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;multiply&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Multiply&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;nn&quot;&gt;Rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;divide&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Divide&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;unreachable!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Expr::parse expected infix operation, found {:?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
            &lt;span class=&quot;nn&quot;&gt;Expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;BinOp&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;op&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Box&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rhs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;})&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here’s an example of how to use the parser.&lt;/p&gt;

&lt;div class=&quot;language-rust highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;Result&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.lock&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.lines&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;CalculatorParser&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;parse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nn&quot;&gt;Rule&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;equation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nd&quot;&gt;println!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Parsed: {:#?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;parse_expr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pairs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
            &lt;span class=&quot;nf&quot;&gt;Err&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
                &lt;span class=&quot;nd&quot;&gt;eprintln!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Parse failed: {:?}&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
            &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nf&quot;&gt;Ok&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(())&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;With this we can parse the following simple equation:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt; 1 * 2 + 3 / 4
Parsed: BinOp {
    lhs: BinOp {
        lhs: Integer( 1 ),
        op: Multiply,
        rhs: Integer( 2 ),
    },
    op: Add,
    rhs: BinOp {
        lhs: Integer( 3 ),
        op: Divide,
        rhs: Integer( 4 ),
    },
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;unary-minus-and-parenthesis&quot;&gt;Unary minus and parenthesis&lt;/h2&gt;
&lt;p&gt;So far our calculator can parse fairly complicated expressions, but it will fail if it encounters explicit parentheses 
or a unary minus sign. Let’s fix that.&lt;/p&gt;

&lt;h3 id=&quot;parentheses&quot;&gt;Parentheses&lt;/h3&gt;
&lt;p&gt;Consider the expression &lt;code class=&quot;highlighter-rouge&quot;&gt;(1 + 2) * 3&lt;/code&gt;. Clearly removing the parentheses would give a different result, so we must 
support parsing such expressions. Luckily, this can be a simple addition to our &lt;code class=&quot;highlighter-rouge&quot;&gt;atom&lt;/code&gt; rule:&lt;/p&gt;

&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gd&quot;&gt;- atom = _{ integer }
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ atom = _{ integer | &quot;(&quot; ~ expr ~ &quot;)&quot; }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Earlier we said that atoms should be simple token sequences that cannot be split up further, but now an atom can contain
arbitrary expressions! The reason we are okay with this is that the parentheses mark clear boundaries for the 
expression, it will not make ambiguous what operators belong to the inner expression and which to the outer one.&lt;/p&gt;

&lt;h3 id=&quot;unary-minus&quot;&gt;Unary minus&lt;/h3&gt;
&lt;p&gt;We can currently only parse positive integers, eg &lt;code class=&quot;highlighter-rouge&quot;&gt;16&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;2342&lt;/code&gt;. But we also want to do calculations with negative intergers.
To do this we introduce the unary minus, so we can make &lt;code class=&quot;highlighter-rouge&quot;&gt;-4&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;-(8 + 15)&lt;/code&gt;.
We need the following change to grammar:&lt;/p&gt;
&lt;div class=&quot;language-diff highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;gi&quot;&gt;+ unary_minus = { &quot;-&quot; ~ atom }
&lt;/span&gt;&lt;span class=&quot;gd&quot;&gt;- atom = _{ integer | &quot;(&quot; ~ expr ~ &quot;)&quot; }
&lt;/span&gt;&lt;span class=&quot;gi&quot;&gt;+ atom = _{ integer | unary_minus | &quot;(&quot; ~ expr ~ &quot;)&quot; }
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;For these last changes we’ve omitted the small changes to the AST and parsing logic. You can find all these details in 
the repository: https://github.com/wildarch/pest-calculator.&lt;/p&gt;

&lt;p&gt;For questions or suggestions, please feel free to open an issues or submit a PR!&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="parsing" />
      

      

      
        <summary type="html">This tutorial focuses on the practical aspect of using precedence climbing to parse expressions using pest. To illustrate this we build a parser for simple equations, and construct an abstract syntax tree. This article is written together with @wildarch.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Qt TableView: Improved Addressbook Example</title>
      
      
      <link href="https://nouwaarom.com/qt/2021/12/19/qt-addressbook-example.html" rel="alternate" type="text/html" title="Qt TableView: Improved Addressbook Example" />
      
      <published>2021-12-19T00:00:00-06:00</published>
      <updated>2021-12-19T00:00:00-06:00</updated>
      <id>https://nouwaarom.com/qt/2021/12/19/qt-addressbook-example</id>
      <content type="html" xml:base="https://nouwaarom.com/qt/2021/12/19/qt-addressbook-example.html">&lt;p&gt;In this post I want to discuss the Qt6 &lt;a href=&quot;https://doc.qt.io/qt-6/qtwidgets-itemviews-addressbook-example.html&quot;&gt;addressbook example&lt;/a&gt;, which is used to explain model/view in Qt.
I will show how we can modify this example to a more maintainable architecture by decoupling the widget and the model.
The original example can be found in Qt creator.
The modified code can be found at my &lt;a href=&quot;https://www.github.com/nouwaarom/Qt-Addressbook-Example&quot;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In the example, the TableView is used to implement a simple addressbook which is sorted by alphabet groups (abc-def-ghi-…). It demonstrates how a view can be sorted by a sort and filter proxy. While the code shows how to use a QTableView and QSortFilterProxyModel, the implemenation violates the &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-responsibility_principle&quot;&gt;single-responsibiliy principle&lt;/a&gt;.
In this post, we will discover how to decouple the tablemodel from the widget.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/addressbook.png&quot; alt=&quot;Screenshot of the addressbook application&quot; class=&quot;align-center&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The main classes of this example are:&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;AddressWidget&lt;/code&gt;, which is a &lt;code class=&quot;highlighter-rouge&quot;&gt;QTabWidget&lt;/code&gt; and is responsible for connecting the model and view.
 It creates and populates the model, creates the view and handles the menu items.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;TableModel&lt;/code&gt;, which is a &lt;code class=&quot;highlighter-rouge&quot;&gt;QAbstractTableModel&lt;/code&gt; and is responsible for keeping track of the contacts and providing data for the view.
 To do this it provides and interface to the view from which data can be read and another interface from which data can be added to the model.
 The interface to the view consist of the functions: &lt;code class=&quot;highlighter-rouge&quot;&gt;rowCount&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;columnCount&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;data&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;headerData&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;flags&lt;/code&gt;.
 The view will use this functions to get the data it wants to display from the model.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;coupling-between-addresswidget-and-tablemodel&quot;&gt;Coupling between AddressWidget and TableModel&lt;/h2&gt;
&lt;p&gt;While browsing the source of &lt;code class=&quot;highlighter-rouge&quot;&gt;AddressWidget&lt;/code&gt; we notice that &lt;code class=&quot;highlighter-rouge&quot;&gt;AddressWidget&lt;/code&gt; is aware of the internals of &lt;code class=&quot;highlighter-rouge&quot;&gt;TableModel&lt;/code&gt;.
Take a look at &lt;code class=&quot;highlighter-rouge&quot;&gt;AddressWidget::addEntry&lt;/code&gt; for example:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AddressWidget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getContacts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insertRows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QModelIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;

        &lt;span class=&quot;n&quot;&gt;QModelIndex&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QModelIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Qt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EditRole&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QModelIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setData&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Qt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;EditRole&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;removeTab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newAddressTab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
&lt;details&gt;&lt;summary&gt;&lt;span class=&quot;c1&quot;&gt;...&lt;/span&gt;&lt;/summary&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;QMessageBox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;information&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Duplicate Name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The name &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; already exists.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/details&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let me try to clarify this code a bit. The property &lt;code class=&quot;highlighter-rouge&quot;&gt;table&lt;/code&gt; holds a &lt;code class=&quot;highlighter-rouge&quot;&gt;TableModel&lt;/code&gt;.
First there is a check of a contact with this data is already in the model and only if there isn’t, the data is added.
To add data to this model the &lt;code class=&quot;highlighter-rouge&quot;&gt;TableModel::insertRows&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;TableModel::setData&lt;/code&gt; functions are used.
The function &lt;code class=&quot;highlighter-rouge&quot;&gt;TableModel::insertRows&lt;/code&gt; adds a new, empty, row.
The function &lt;code class=&quot;highlighter-rouge&quot;&gt;TableModel::setData&lt;/code&gt; sets the data for a specific row and column. The first column contains the name and the second column contains the address.&lt;/p&gt;

&lt;h2 id=&quot;why-coupling-is-not-ideal&quot;&gt;Why coupling is not ideal&lt;/h2&gt;
&lt;p&gt;The problem with this code is that &lt;code class=&quot;highlighter-rouge&quot;&gt;AddressWidget&lt;/code&gt; sets data to a specific row and column index.
This means it needs to be aware of how &lt;code class=&quot;highlighter-rouge&quot;&gt;TableModel&lt;/code&gt; stores its data.
If you would decide it is better to change the ordering of the columns, or add a new column in between them, you would need to rewrite the &lt;code class=&quot;highlighter-rouge&quot;&gt;AddressWidget&lt;/code&gt; as well.
The tricky thing is that these are changes to the layout.
You do not expect that a change to the layout would break editing or adding contacts, so you might not test this.
Evenmore, the code would still work because both name and address are a QString, but the behaviour is now completely different from what you intended.&lt;/p&gt;

&lt;p&gt;In other words, this code violates the &lt;a href=&quot;https://en.wikipedia.org/wiki/Single-responsibility_principle&quot;&gt;single-responsibiliy principle&lt;/a&gt;:
The view reposibility should be limited to the &lt;code class=&quot;highlighter-rouge&quot;&gt;TableModel&lt;/code&gt; (the &lt;em&gt;view&lt;/em&gt; model), and the &lt;code class=&quot;highlighter-rouge&quot;&gt;AddressWidget&lt;/code&gt; should only be responsible for providing the correct data to the view model.&lt;/p&gt;

&lt;h2 id=&quot;decoupling&quot;&gt;Decoupling&lt;/h2&gt;
&lt;p&gt;We can simplify this code and fix the coupling by creating a &lt;code class=&quot;highlighter-rouge&quot;&gt;TableModel::addContact&lt;/code&gt; method.
Let’s look at this method and the simplified version of &lt;code class=&quot;highlighter-rouge&quot;&gt;AddressWidget::addEntry&lt;/code&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;TableModel&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addContact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Contact&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// The beginInsertRows and endInsertRows are used to signal updates to the view.&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;beginInsertRows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;QModelIndex&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;contacts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;endInsertRows&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;As we can see, the &lt;code class=&quot;highlighter-rouge&quot;&gt;addContact&lt;/code&gt; function is really clean.
The contact is added to the list of contacts and two helper functions are called in order to notify the view of the change.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AddressWidget&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addEntry&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;QString&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getContacts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contains&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}))&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;table&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addContact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Contact&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;removeTab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;newAddressTab&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;QMessageBox&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;information&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Duplicate Name&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;tr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;The name &lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;%1&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\&quot;&lt;/span&gt;&lt;span class=&quot;s&quot;&gt; already exists.&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;));&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In &lt;code class=&quot;highlighter-rouge&quot;&gt;addEntry&lt;/code&gt;, we can replace the whole sequence for adding a contact with a simple call to &lt;code class=&quot;highlighter-rouge&quot;&gt;table-&amp;gt;addContact&lt;/code&gt;.
With this approach the internals of &lt;code class=&quot;highlighter-rouge&quot;&gt;TableModel&lt;/code&gt; can now safely be changed without having to modify &lt;code class=&quot;highlighter-rouge&quot;&gt;AddressWidget&lt;/code&gt; and we have created more readable code!&lt;/p&gt;

&lt;p&gt;Now, there is a reason for using the &lt;code class=&quot;highlighter-rouge&quot;&gt;TableModel::setData&lt;/code&gt; function.
If a model is editable, the view uses &lt;code class=&quot;highlighter-rouge&quot;&gt;setData&lt;/code&gt; to modify it’s data.
This works really nicely and maybe I will write a short post about it, but until then you can check the &lt;a href=&quot;https://www.github.com/nouwaarom/Qt-Addressbook-Example&quot;&gt;repository&lt;/a&gt; for this project to see how it is used.&lt;/p&gt;

&lt;p&gt;Thank you for reading. If you have questions or suggestions, please open an issue or mergerequest on the &lt;a href=&quot;https://github.com/nouwaarom/nouwaarom.github.io&quot;&gt;repository&lt;/a&gt; for this site.&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="qt" />
      

      

      
        <summary type="html">In this post I want to discuss the Qt6 addressbook example, which is used to explain model/view in Qt. I will show how we can modify this example to a more maintainable architecture by decoupling the widget and the model. The original example can be found in Qt creator. The modified code can be found at my GitHub.</summary>
      

      
      
    </entry>
  
  
  
  
  
    <entry>
      
      <title type="html">Semihosting: initialize monitor</title>
      
      
      <link href="https://nouwaarom.com/embedded/c/initialize_monitor_handles/2021/01/30/investigating-semihosting.html" rel="alternate" type="text/html" title="Semihosting: initialize monitor" />
      
      <published>2021-01-30T00:00:00-06:00</published>
      <updated>2021-01-30T00:00:00-06:00</updated>
      <id>https://nouwaarom.com/embedded/c/initialize_monitor_handles/2021/01/30/investigating-semihosting</id>
      <content type="html" xml:base="https://nouwaarom.com/embedded/c/initialize_monitor_handles/2021/01/30/investigating-semihosting.html">&lt;p&gt;When developing software for ARM microcontrollers there is a big chance that you want to use semihosting.
Using semihosting you can send debug messages over SWD of JTAG using the debugger.
This makes development easier as you do not need an other peripheral.
I found that setting up semihosting myself was quite confusing.
If you browse the internet there are some posts and guides on how to setup semihosting, but almost none really explaning what is going on internally.
In this post I will dig deeper in to how it works.
&lt;!--more--&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-simple-example&quot;&gt;A simple example&lt;/h2&gt;
&lt;p&gt;We start with an example of how to use semihosting after that we will investigate what is going on.
Consider the following piece of code (&lt;code class=&quot;highlighter-rouge&quot;&gt;main.c&lt;/code&gt;). Which uses semihosting to print over the debug console.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&amp;lt;stdio.h&amp;gt;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;extern&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialise_monitor_handles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;initialise_monitor_handles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;printf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello!&lt;/span&gt;&lt;span class=&quot;se&quot;&gt;\n&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;In this example I build for a cortex-m33 because that is the architecture I use. You can change the flags to compile it for other processors.
We can compile this using:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ arm-none-eabi-gcc -nostdlib \
-marm -mcpu=cortex-m33 -mfpu=fpv5-sp-d16 -mfloat-abi=hard -mthumb \
-o main.o -c main.c
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;And link it using (this binary won’t work, you need a linker script and startup files, which are mostly device specific.)&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;$ arm-none-eabi-gcc --specs=rdimon.specs -nostartfiles \
-marm -mcpu=cortex-m33 -mfpu=fpv5-sp-d16 -mfloat-abi=hard -mthumb \
-lc -lrdimon main.o -o main
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;The important flags for semihosting are: &lt;code class=&quot;highlighter-rouge&quot;&gt;--specs=rdimon.specs&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;-lrdimon&lt;/code&gt;.
When you have a debug session using &lt;code class=&quot;highlighter-rouge&quot;&gt;gdb&lt;/code&gt; you need to execute
&lt;code class=&quot;highlighter-rouge&quot;&gt;arm semihosting enable&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;monitor semihosting enable&lt;/code&gt;.
Depending on the gdb server that you use (JLinkGDBServer, openocd, …).&lt;/p&gt;

&lt;h2 id=&quot;monitor-handles-and-the-angel-swi&quot;&gt;Monitor Handles and the Angel SWI&lt;/h2&gt;
&lt;p&gt;The first thing we note it the function &lt;em&gt;initialise_monitor_handles&lt;/em&gt;.
Without this function you cannot print over semihosting, but what does it do?
The implementation of this function in newlib can be found in the source of &lt;a href=&quot;https://github.com/mirror/newlib-cygwin/blob/master/newlib/libc/sys/arm/syscalls.c&quot;&gt;newlib/libc/sys/arm/syscall.c&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;initialise_monitor_handles&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/* Open the standard file descriptors by opening the special
   * teletype device, &quot;:tt&quot;, read-only to obtain a descriptor for
   * standard input and write-only to obtain a descriptor for standard
   * output. Finally, open &quot;:tt&quot; in append mode to obtain a descriptor
   * for standard error. Since this is a write mode, most kernels will
   * probably return the same value as for standard output, but the
   * kernel can differentiate the two using the mode flag and return a
   * different descriptor for standard error.
   */&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#ifdef ARM_RDI_MONITOR
&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;:tt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* length of filename */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* mode &quot;r&quot; */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;monitor_stdin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_AngelSWI&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AngelSWI_Reason_Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;:tt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* length of filename */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;     &lt;span class=&quot;cm&quot;&gt;/* mode &quot;w&quot; */&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;monitor_stdout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monitor_stderr&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;do_AngelSWI&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AngelSWI_Reason_Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#else
&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;:tt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mov r0,%2; mov r1, #0; swi %a1; mov %0, r0&quot;&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;=r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;i&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SWI_Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;r1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;monitor_stdin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;:tt&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mov r0,%2; mov r1, #4; swi %a1; mov %0, r0&quot;&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;=r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;i&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;SWI_Open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;r1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;monitor_stdout&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monitor_stderr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#endif
&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;MAX_OPEN_FILES&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;++&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;openfiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;openfiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monitor_stdin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;openfiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;openfiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;handle&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;monitor_stdout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;openfiles&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can see in this function opens the stdout and stdin file.
We require the stdout file for &lt;em&gt;printf&lt;/em&gt; to work.
The preprocessor switch between &lt;code class=&quot;highlighter-rouge&quot;&gt;ARM_RDI_MONITOR&lt;/code&gt; and it’s counterpart &lt;code class=&quot;highlighter-rouge&quot;&gt;ARM_RDP_MONITOR&lt;/code&gt; is very interesting.
It turns out that there are two debugging protocols: RDP which is also called Demon, and RDI which is also called Angel.
Now we have to figure out which protocol we are using.
When we look at the linker command we used previously, we notice &lt;code class=&quot;highlighter-rouge&quot;&gt;--specs=rdimon.specs&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;-lrdimon&lt;/code&gt;. 
If we look at the contents of &lt;code class=&quot;highlighter-rouge&quot;&gt;rdimon.specs&lt;/code&gt;, we see:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;# rdimon.specs
#
# Spec file for AArch64 baremetal newlib with version 2 of the
# AngelAPI semi-hosting using the SVC trap instruction.
#
# This version supports extensibility through an extension mechanism.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;So we are using RDI. 
Notice that in the same folder as, &lt;code class=&quot;highlighter-rouge&quot;&gt;lib/arm-none-eabi/newlib&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;rdimon.specs&lt;/code&gt; there also is a &lt;code class=&quot;highlighter-rouge&quot;&gt;rdpmon.specs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;With this informatin we now want to inspect &lt;code class=&quot;highlighter-rouge&quot;&gt;do_AngelSWI&lt;/code&gt;.
We can find its implementation in
The implementation of this function in newlib can be found at &lt;a href=&quot;https://github.com/mirror/newlib-cygwin/blob/master/newlib/libc/sys/arm/swi.h&quot;&gt;newlib/libc/sys/arm/swi.h&lt;/a&gt;.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c&quot; data-lang=&quot;c&quot;&gt;&lt;span class=&quot;cp&quot;&gt;#include&lt;/span&gt; &lt;span class=&quot;cpf&quot;&gt;&quot;arm.h&quot;&lt;/span&gt;&lt;span class=&quot;cp&quot;&gt;
&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* SWI numbers for RDP (Demon) monitor.
 *
 * ...
 */&lt;/span&gt;


&lt;span class=&quot;cm&quot;&gt;/* Now the SWI numbers and reason codes for RDI (Angel) monitors.  */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define AngelSWI_ARM 			0x123456
#ifdef __thumb__
#define AngelSWI 			0xAB
#else
#define AngelSWI 			AngelSWI_ARM
#endif
&lt;/span&gt;&lt;span class=&quot;cm&quot;&gt;/* For thumb only architectures use the BKPT instruction instead of SWI.  */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#ifdef THUMB_VXM
#define AngelSWIInsn			&quot;bkpt&quot;
#define AngelSWIAsm			bkpt
#else
#define AngelSWIInsn			&quot;swi&quot;
#define AngelSWIAsm			swi
#endif
&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;/* The reason codes:  */&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#define AngelSWI_Reason_Open		0x01
#define AngelSWI_Reason_Close		0x02
#define AngelSWI_Reason_WriteC		0x03
#define AngelSWI_Reason_Write0		0x04
#define AngelSWI_Reason_Write		0x05
#define AngelSWI_Reason_Read		0x06
#define AngelSWI_Reason_ReadC		0x07
#define AngelSWI_Reason_IsTTY		0x09
#define AngelSWI_Reason_Seek		0x0A
#define AngelSWI_Reason_FLen		0x0C
#define AngelSWI_Reason_TmpNam		0x0D
#define AngelSWI_Reason_Remove		0x0E
#define AngelSWI_Reason_Rename		0x0F
#define AngelSWI_Reason_Clock		0x10
#define AngelSWI_Reason_Time		0x11
#define AngelSWI_Reason_System		0x12
#define AngelSWI_Reason_Errno		0x13
#define AngelSWI_Reason_GetCmdLine 	0x15
#define AngelSWI_Reason_HeapInfo 	0x16
#define AngelSWI_Reason_EnterSVC 	0x17
#define AngelSWI_Reason_ReportException 0x18
#define ADP_Stopped_ApplicationExit 	((2 &amp;lt;&amp;lt; 16) + 38)
#define ADP_Stopped_RunTimeError 	((2 &amp;lt;&amp;lt; 16) + 35)
&lt;/span&gt;
&lt;span class=&quot;cp&quot;&gt;#if defined(ARM_RDI_MONITOR) &amp;amp;&amp;amp; !defined(__ASSEMBLER__)
&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kr&quot;&gt;inline&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;
&lt;span class=&quot;nf&quot;&gt;do_AngelSWI&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;asm&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;volatile&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mov r0, %1; mov r1, %2; &quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;AngelSWIInsn&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; %a3; mov %0, r0&quot;&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;=r&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Outputs */&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;reason&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;i&quot;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AngelSWI&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/* Inputs */&lt;/span&gt;
       &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r0&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;r3&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;ip&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;lr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;memory&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;cc&quot;&lt;/span&gt;
		&lt;span class=&quot;cm&quot;&gt;/* Clobbers r0 and r1, and lr if in supervisor mode */&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
                &lt;span class=&quot;cm&quot;&gt;/* Accordingly to page 13-77 of ARM DUI 0040D other registers
                   can also be clobbered.  Some memory positions may also be
                   changed by a system call, so they should not be kept in
                   registers. Note: we are assuming the manual is right and
                   Angel is respecting the APCS.  */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cp&quot;&gt;#endif&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If we look at the documentation for &lt;code class=&quot;highlighter-rouge&quot;&gt;SYS_OPEN&lt;/code&gt; at &lt;a href=&quot;https://developer.arm.com/documentation/dui0040/d/angel/angel-c-library-support-swis/sys-open--0x01-&quot;&gt;developer.arm.com&lt;/a&gt;
We can see that these calls open the console input and output &lt;code class=&quot;highlighter-rouge&quot;&gt;:tt&lt;/code&gt;.
The function returns a file handle that can be used for further I/O operations.&lt;/p&gt;

&lt;h2 id=&quot;printing&quot;&gt;Printing&lt;/h2&gt;
&lt;p&gt;When we look at the disassembly of main, which can be found by &lt;code class=&quot;highlighter-rouge&quot;&gt;$ arm-none-eabi-objdump --disassemble main.o&lt;/code&gt;.
We see that the &lt;em&gt;printf&lt;/em&gt; has been replaced by a call to &lt;em&gt;puts&lt;/em&gt;.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;main.o:     file format elf32-littlearm

Disassembly of section .text.main:
00000000 &amp;lt;main&amp;gt;:
   0:	b580      	push	{r7, lr}
   2:	af00      	add	r7, sp, #0
   4:	f7ff fffe 	bl	0 &amp;lt;initialise_monitor_handles&amp;gt;
   8:	4802      	ldr	r0, [pc, #8]	; (14 &amp;lt;main+0x14&amp;gt;)
   a:	f7ff fffe 	bl	0 &amp;lt;puts&amp;gt;
   e:	2300      	movs	r3, #0
  10:	4618      	mov	r0, r3
  12:	bd80      	pop	{r7, pc}
  14:	00000000 	.word	0x00000000
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;The source of &lt;em&gt;puts&lt;/em&gt; is quite complex. In order to keep this post to a reasonable length, we will explore this function in the next post.
Thank you for reading. If you have questions or suggestions, please open an issue or mergerequest on the &lt;a href=&quot;https://github.com/nouwaarom/nouwaarom.github.io&quot;&gt;repository&lt;/a&gt; for this site.&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="embedded" />
      
        <category term="c" />
      
        <category term="initialize_monitor_handles" />
      

      

      
        <summary type="html">When developing software for ARM microcontrollers there is a big chance that you want to use semihosting. Using semihosting you can send debug messages over SWD of JTAG using the debugger. This makes development easier as you do not need an other peripheral. I found that setting up semihosting myself was quite confusing. If you browse the internet there are some posts and guides on how to setup semihosting, but almost none really explaning what is going on internally. In this post I will dig deeper in to how it works.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Model Checking</title>
      
      
      <link href="https://nouwaarom.com/misc/2019/12/05/model-checking.html" rel="alternate" type="text/html" title="Model Checking" />
      
      <published>2019-12-05T00:00:00-06:00</published>
      <updated>2019-12-05T00:00:00-06:00</updated>
      <id>https://nouwaarom.com/misc/2019/12/05/model-checking</id>
      <content type="html" xml:base="https://nouwaarom.com/misc/2019/12/05/model-checking.html">&lt;p&gt;This post is a simple introduction modelchecking.
The goal of model checking is to verify if the behaviour of a system is as intended.
This verification is especially usefull for safety-critical systems.
Here are some examples:
For the software in a car you want the brake pedal to &lt;em&gt;always&lt;/em&gt; make the car brake, you do not want the turning on the radio can effect this behaviour.
For the traffic lights of an intersection you &lt;em&gt;never&lt;/em&gt; want two crossing lanes to have green light at the same time.
A second intended behaviour of a traffic light system is that every lane will get green &lt;em&gt;eventually&lt;/em&gt;.&lt;/p&gt;

&lt;!--more--&gt;

&lt;p&gt;In order to verify the behaviour of a system we need two things.
The first thing is a good model of the system.
The second thing is a good description of the intended behaviour of the system.
In the next sections we will give a description of what a “good model” and a “good description” of behaviour might be.
What I will describe is definitely not the only option, or the best option for every system, there are different choices for different types of systems.&lt;/p&gt;

&lt;h3 id=&quot;models&quot;&gt;Models&lt;/h3&gt;
&lt;p&gt;Let us start with defining what a “good model” might be for checking the behaviour of a system.
A model is a simpler representation of the truth.
We want a model that is as simple as possible, but not so simple that a problemwith the model does not point to a problem in the real system.
This makes sense, right?&lt;/p&gt;

&lt;p&gt;Let’s take a system and see what we can remove in order to get a simple model that is still usefull.
If we take the example of a traffic-light system for an intersection.
The “real” system includes: lights, controllers and the software they run, a lot of wires, vehicle detection sensors, some buttons for the pedestrians.&lt;/p&gt;

&lt;p&gt;Now, what information do we need in order to check the behaviour described above (no crossing lanes have green at the same moment, a lanes will eventually get green)?
For the lights we only care about their state, are they red, orange or green? How they are connected and how bright they are etc. is not important to us.
We are also not interested in the specifics of the buttons, they can be represented as simple binary input: a car is detected, or it is not; there are pedestrians, or there are no pedestrians.&lt;/p&gt;

&lt;p&gt;For the controllers we are not interested in the specific hardware or software they use.
We are interested in how a controller responds given a certain input and having a certain &lt;em&gt;state&lt;/em&gt;.
The controller has a &lt;em&gt;state&lt;/em&gt; that is based on its previous inputs.
We are not interested in what exactly this state is. e.g. we do not care the values of variables in the controller or where in it’s program it is executing.
What we are interested in is which states a certain input can be given and in which states a certain output is produced.&lt;/p&gt;

&lt;p&gt;So, what are we interested in?
Given the following crossing:
&lt;img src=&quot;/assets/img/crossing.png&quot; alt=&quot;Crossing&quot; /&gt;
Where every lane has one light for every direction and a sensor that detects if there is a vehicle in that lane.&lt;/p&gt;

&lt;p&gt;And the following control system:&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;car_north = false
car_east = false
...

north_light = red
east_light = red
west_light = red
south_light = red

repeat {
    if (car_north AND east_light=red AND west_light=red AND south_light=red) {
        north_light = green
        wait(5s)
        north_light = orange
        wait(2s)
        north_light = red
    }
    if (car_east AND ...
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;where &lt;code class=&quot;highlighter-rouge&quot;&gt;car_x&lt;/code&gt; is changed by the sensor.&lt;/p&gt;

&lt;p&gt;This behaviour might be modeled as:
The lights are displayed as (north_color, east_color, west_color, south_color).&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;state1: (red,red,red,red) transitions to (state2, state4)&lt;/li&gt;
  &lt;li&gt;state2: (green,red,red,red) transitions to (state3)&lt;/li&gt;
  &lt;li&gt;state3: (orange,red,red,red) transitinos to (state4)&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;state4: (red,red,red,red) transitions to (state5)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;state5: (red,red,red,red) transitions to (state6, state8)&lt;/li&gt;
  &lt;li&gt;state6: (red,green,red,red) transitions to (state7)&lt;/li&gt;
  &lt;li&gt;state7: (red,orange,red,red) transitinos to (state8)&lt;/li&gt;
  &lt;li&gt;state8: (red,red,red,red) transitions to …
…&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;This way of describing the system preserves the required information to do analysis of the behaviour of the system but removes all other information.&lt;/p&gt;

&lt;h3 id=&quot;behaviour&quot;&gt;Behaviour&lt;/h3&gt;
&lt;p&gt;This post is already long enough and I don’t want to cause you a headache.
How to behave will be handled in the next post.&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="misc" />
      

      

      
        <summary type="html">This post is a simple introduction modelchecking. The goal of model checking is to verify if the behaviour of a system is as intended. This verification is especially usefull for safety-critical systems. Here are some examples: For the software in a car you want the brake pedal to always make the car brake, you do not want the turning on the radio can effect this behaviour. For the traffic lights of an intersection you never want two crossing lanes to have green light at the same time. A second intended behaviour of a traffic light system is that every lane will get green eventually.</summary>
      

      
      
    </entry>
  
  
  
    <entry>
      
      <title type="html">Introduction</title>
      
      
      <link href="https://nouwaarom.com/misc/2019/11/22/welcome.html" rel="alternate" type="text/html" title="Introduction" />
      
      <published>2019-11-22T00:00:00-06:00</published>
      <updated>2019-11-22T00:00:00-06:00</updated>
      <id>https://nouwaarom.com/misc/2019/11/22/welcome</id>
      <content type="html" xml:base="https://nouwaarom.com/misc/2019/11/22/welcome.html">&lt;p&gt;This is a little introduction to who I am.
I have always been intrigued by technology. When I was in elementary school I was trying to understand how planes and engines worked and then tried to design them myself in paint :).&lt;/p&gt;

&lt;p&gt;In highschool I became interested in computers because I started gaming.
I wanted to write a game myself so I tried to build something in Unity3D.
In university I studied electrical engineering and embedded systems and learned a lot more about hardware and software design.
I am currently working as an embedded software engineer, which is a lot of fun.&lt;/p&gt;</content>

      
      
      
      
      

      

      
        <category term="misc" />
      

      

      
        <summary type="html">This is a little introduction to who I am. I have always been intrigued by technology. When I was in elementary school I was trying to understand how planes and engines worked and then tried to design them myself in paint :). In highschool I became interested in computers because I started gaming. I wanted to write a game myself so I tried to build something in Unity3D. In university I studied electrical engineering and embedded systems and learned a lot more about hardware and software design. I am currently working as an embedded software engineer, which is a lot of fun.</summary>
      

      
      
    </entry>
  
  
</feed>
